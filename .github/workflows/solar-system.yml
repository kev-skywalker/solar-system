name: Solar System Workflow

on:
  workflow_dispatch:
  push:
    branches:
        - main
        - 'feature/*'
env:
    MONGO_URI: 'mongodb+srv://supercluster.d83jj.mongodb.net/superData' 
    MONGO_USERNAME: ${{ vars.MONGO_USERNAME }}
    MONGO_PASSWORD: ${{ secrets.MONGO_PASSWORD }}
jobs:
    unit-testing:
        name: Unit Testing
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            ports:
              - 27017:27017
        env:
          MONGO_URI: 'mongodb://localhost:27017/superData' 
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password


        strategy:
            matrix:
                nodejs_version: [18, 20]
                operating_system: [ubuntu-latest]
                exclude:
                    - nodejs_version: 18
                      operating_system: macos-latest
        runs-on: ${{ matrix.operating_system }}
        steps:
        - name: checkout repository
          uses: actions/checkout@v4

        - name: Setup NodeJS Version - ${{ matrix.nodejs_version }}
          uses: actions/setup-node@v3
          with:
            node-version: ${{ matrix.nodejs_version }}

        - name: Cache NPM dependencies
          uses: actions/cache@v3
          with:
            path: ~/.npm
            key: ${{ runner.os }}-node-module-${{ hashFiles('package-lock.json') }}
        
        - name: install Dependencies
          run: npm install

        - name: Unit Testing
          id:  nodejs-unit-testing-step #set id in order to bypass the failure of the current step
          run: npm test
        
        - name: Archive Test Result
          #if the outcome status of the previous step is failure, then the next step will still run
          #if: failure() && (steps.nodejs-unit-testing-step.outcome == 'failure' || steps.nodejs-unit-testing-step.outcome == 'success') 
          #this step will always run even if the previous status step is success or failure
          if: always()
          uses: actions/upload-artifact@v3
          with:
            name: Mocha-Test-Result
            path: test-results.xml

    code-coverage:
        name: Code Coverage
        #if we use container job, we no longer need actions/setup-node@v3. the container job already contains the necessaries
        container:
            image: node:18
        services:
          mongo-db:
            image: siddharth67/mongo-db:non-prod
            #no need to map any port with the bridge network's user-defined
            #options to modify the hostname
            options:
              --name mongo
        env:
          MONGO_URI: 'mongodb://mongo:27017/superData' 
          MONGO_USERNAME: non-prod-user
          MONGO_PASSWORD: non-prod-password
            
        runs-on: ubuntu-latest
        steps:
        - name: Checkout Repository
          uses: actions/checkout@v4

        # - name: Setup NodeJS version - 18
        #  uses: actions/setup-node@v3
        #  with:
        #    node-version: 18
        - name: Cache NPM dependencies
          uses: actions/cache@v3
          with:
            path: ~/.npm
            key: ${{ runner.os }}-node-module-${{ hashFiles('package-lock.json') }}

        - name: install Dependencies
          run: npm install

        - name: check code coverage
          continue-on-error: true
          run: npm run coverage

        - name: Archive Test Result
          uses: actions/upload-artifact@v3
          with:
            name: Code-Coverage-Result
            path: covarage
            retention-days: 5

    docker:
        name: Containerization
        needs: [unit-testing, code-coverage]
        runs-on: ubuntu-latest
        permissions:
            packages: write #grant permission to github token for pushing and publishing packages to github container registry

        steps:
        - name: Checkout Repo
          uses: actions/checkout@v4

        - name: Dockerhub Login
          uses: docker/login-action@v2.2.0
          with:
            username: ${{ vars.DOCKERHUB_USERNAME}}
            password: ${{ secrets.DOCKERHUB_PASSWORD }}

        - name: GHCR Login
          uses: docker/login-action@v2.2.0
          with:
            registry: ghcr.io 
            username: ${{ github.repository_owner }}
            password: ${{ secrets.GITHUB_TOKEN }}
        
        - name: Docker Build For Testing
          uses:  docker/build-push-action@v4
          with:
            context: .
            push: false
            tags: |
              ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
        
        - name: Docker Image Testing
          run: |
            echo "_________LIST OF DOCKER IMAGES_____________"
            docker images
            echo "_______RUNNING SOLAR-SYSTEM_APP CONATINER______"
            
            docker run --name solar-system-app -d \
                 -p 3000:3000 \
                 -e MONGO_URI=$MONGO_URI \
                 -e MONGO_USERNAME=$MONGO_USERNAME \
                 -e MONGO_PASSWORD=$MONGO_PASSWORD \
                 ${{ vars.DOCKERHUB_USERNAME}}/solar-system:${{ github.sha }}

            echo "____EXPORT THE IP OF THE RUNNING CONTAINERS____"
            export IP=$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' solar-system-app)
            echo $IP
            echo "______LIST OF RUNNING CONTAINERS______"
            docker ps -a

            echo "Testing Image URL using wget"
            wget -q -O - 127.0.0.1:3000/live | grep live
    
        - name: Container Registry Push
          uses:  docker/build-push-action@v4
          with:
            context: .
            push: true
            tags: |
               ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
               ghcr.io/${{ github.repository_owner }}/solar-system:${{ github.sha }}

    dev-deploy:
          #this job will only run the current branch contains "feature/"
          if: contains(github.ref, 'feature/')
          name: Deployment on dev environment
          needs: docker
          #these envorinment option will ensure to pass all protection rules before starting the jobs
          environment:
            name: development
            #copied from job outputs layer in order to easily get it
            url: https://${{ steps.step-set_ingress_host_url.outputs.APP_INGRESS_HOST }}

          runs-on: ubuntu-latest
          # Map a step output to a job output
          outputs:
              APP_INGRESS_HOST: ${{ steps.step-set_ingress_host_url.outputs.APP_INGRESS_HOST }}
          steps:
            - name: checkout Repo
              uses: actions/checkout@v4

            - name: Install kubectl CLI
              uses: azure/setup-kubectl@v3
              with:
                version: 'v1.26.0'

            - name: set Kubeconfig
              uses: azure/k8s-set-context@v3
              with:
                method: kubeconfig
                kubeconfig: ${{ secrets.KUBECONFIG }}

            - name: Fetch Kubernetes cluster Details
              run: |
                 kubectl version --short
                 echo ---------------------
                 kubectl get nodes
            
            - name: save Nginx Ingress Controller IP as a GITHUB Environment Variable
              #any declared variable in this step will not be available for the current step all subsequent steps in a job will have access
              run: |
                echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jspath=".status.loadbalancer.ingress[0].ip") >> "$GITHUB_ENV"
            
        
            - name: Replace Token in Manifest File
              uses: cschleiden/replace-tokens@v1
              with:
                tokenPrefix: '${'
                tokenSuffix: '}'
                files: '["kubernetes/development/*.yaml"]'
              env:
                NAMESPACE: ${{ vars.NAMESPACE }}
                REPLICAS:  ${{ vars.REPLICAS }}
                IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
                #use the declared variable in the $GITHUB_ENV
                INGRESS_IP: ${{ env.INGRESS_IP }}

            - name: Check Files
              run: |
                cat kubernetes/development/*.yaml

            - name: Create and check MongoDB Secret
              run: |
                echo --------create MongoDB Secret---------
                kubectl -n ${{ vars.NAMESPACE }} create secret mongo-db-creds \
                --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
                --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
                --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
                --save-config \
                --dry-run=client \
                -o yaml | kubectl apply -f -
                echo --------check MongoDB secret-----------
                kubectl -n ${{ vars.NAMESPACE }} get secrets

            - name: Deploy to DEV Env and check and Verify
              run: |
                kubectl apply -f kubernetes/development
                echo ------ get all infos about deploy ----------
                kubectl -n ${{ vars.NAMESPACE }} get all

            - name: Set App Ingress Host URL
              id: step-set_ingress_host_url
              run: |
                echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath="(.items[0].spec.tls[0].hosts[0])")" >> "$GITHUB_OUTPUT"
    
    dev-integration-testing:
        #this job will only run the current branch contains "feature/"
        if: contains(github.ref, 'feature/')
        name: Dev Integration Testing
        needs: dev-deploy
        runs-on: ubuntu-latest
        steps:
          - name: Test URL Output using CURL and JQ
            env:
              URL: ${{ needs.dev-deploy.outputs.APP_INGRESS_HOST }}
            run: |
              echo ${URL}
              echo "----------------------------"
              curl https://${URL}/live -s -k | jq -r .status | grep -i live # -k option to ignore the certificate

    prod-deploy:
          if: github.ref == 'refs/head/main'
          name: Deployment on prod environment
          needs: docker
          #these envorinment option will ensure to pass all protection rules before starting the jobs
          environment:
            name: production
            #copied from job outputs layer in order to easily get it
            url: https://${{ steps.step-set_ingress_host_url.outputs.APP_INGRESS_HOST }}

          runs-on: ubuntu-latest
          # Map a step output to a job output
          outputs:
              APP_INGRESS_HOST: ${{ steps.step-set_ingress_host_url.outputs.APP_INGRESS_HOST }}
          steps:
            - name: checkout Repo
              uses: actions/checkout@v4

            - name: Install kubectl CLI
              uses: azure/setup-kubectl@v3
              with:
                version: 'v1.26.0'

            - name: set Kubeconfig
              uses: azure/k8s-set-context@v3
              with:
                method: kubeconfig
                kubeconfig: ${{ secrets.KUBECONFIG }}

            - name: Fetch Kubernetes cluster Details
              run: |
                 kubectl version --short
                 echo ---------------------
                 kubectl get nodes
            
            - name: save Nginx Ingress Controller IP as a GITHUB Environment Variable
              #any declared variable in this step will not be available for the current step all subsequent steps in a job will have access
              run: |
                echo "INGRESS_IP=$(kubectl -n ingress-nginx get services ingress-nginx-controller -o jspath=".status.loadbalancer.ingress[0].ip") >> "$GITHUB_ENV"
            
        
            - name: Replace Token in Manifest File
              uses: cschleiden/replace-tokens@v1
              with:
                tokenPrefix: '${'
                tokenSuffix: '}'
                files: '["kubernetes/production/*.yaml"]'
              env:
                NAMESPACE: ${{ vars.NAMESPACE }}
                REPLICAS:  ${{ vars.REPLICAS }}
                IMAGE: ${{ vars.DOCKERHUB_USERNAME }}/solar-system:${{ github.sha }}
                #use the declared variable in the $GITHUB_ENV
                INGRESS_IP: ${{ env.INGRESS_IP }}

            - name: Check Files
              run: |
                cat kubernetes/development/*.yaml

            - name: Create and check MongoDB Secret
              run: |
                echo --------create MongoDB Secret---------
                kubectl -n ${{ vars.NAMESPACE }} create secret mongo-db-creds \
                --from-literal=MONGO_URI=${{ env.MONGO_URI }} \
                --from-literal=MONGO_USERNAME=${{ vars.MONGO_USERNAME }} \
                --from-literal=MONGO_PASSWORD=${{ secrets.MONGO_PASSWORD }} \
                --save-config \
                --dry-run=client \
                -o yaml | kubectl apply -f -
                echo --------check MongoDB secret-----------
                kubectl -n ${{ vars.NAMESPACE }} get secrets

            - name: Deploy to PROD Env and check and Verify
              run: |
                kubectl apply -f kubernetes/production
                echo ------ get all infos about deploy ----------
                kubectl -n ${{ vars.NAMESPACE }} get all

            - name: Set App Ingress Host URL
              id: step-set_ingress_host_url
              run: |
                echo "APP_INGRESS_HOST=$(kubectl -n ${{ vars.NAMESPACE }} get ingress -o jsonpath="(.items[0].spec.tls[0].hosts[0])")" >> "$GITHUB_OUTPUT"
    
    prod-integration-testing:
        if: github.ref == 'refs/head/main'
        name: Prod Integration Testing
        needs: prod-deploy
        runs-on: ubuntu-latest
        steps:
          - name: Test URL Output using CURL and JQ
            env:
              URL: ${{ needs.prod-deploy.outputs.APP_INGRESS_HOST }}
            run: |
              echo ${URL}
              echo "----------------------------"
              curl https://${URL}/live -s -k | jq -r .status | grep -i live # -k option to ignore the certificate   

              
